# -*- coding: utf-8 -*-
"""finalday2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-ckpsrHyApCsln_YCofF6TpvSsBNk7y
"""

!pip install numpy

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

path_to_csv_file = '/content/drive/MyDrive/movies.csv'
df = pd.read_csv(path_to_csv_file)

df.head()

# Load the dataset into a pandas DataFrame.
import pandas as pd

try:
    path_to_csv_file = '/content/drive/MyDrive/movies.csv'
    df = pd.read_csv(path_to_csv_file)
except FileNotFoundError:
    print("File 'movies.csv' not found.")
    exit(1)

# Display the first few rows of the DataFrame to check the data
print(df.head())

# Preprocess the data by handling any missing values and data types.
missing_values = df.isnull().sum()
print("Missing values:\n", missing_values)

# Calculate the following statistics for the dataset:
# The average movie rating.

average_rating = df["Movie Rating"].mean()
print("Average Movie Rating:", average_rating)

import pandas as pd


# Find the year of the highest-grossing movie

if not pd.api.types.is_string_dtype(df["Gross"]):
    # If it's not a string, convert it to string
    df["Gross"] = df["Gross"].astype(str)


df["Gross"] = df["Gross"].str.replace('[\$,]', '', regex=True)
df["Gross"] = pd.to_numeric(df["Gross"], errors='coerce')

highest_grossing_year = df[df["Gross"] == df["Gross"].max()]["Year of Release"].values[0]
print("Year of Highest-Grossing Movie:", highest_grossing_year)

# Find the movie with the longest watch time
longest_watch_time_movie = df[df["Watch Time"] == df["Watch Time"].max()]["Movie Name"].values[0]
print("Movie with Longest Watch Time:", longest_watch_time_movie)

# Create a new DataFrame containing movies released after the year 2000
import pandas as pd

df["Year of Release"] = df["Year of Release"].str.extract(r'(\d{4})', expand=False)

df["Year of Release"] = pd.to_numeric(df["Year of Release"], errors='coerce')

movies_after_2000 = df[df["Year of Release"] > 2000].copy()

# Calculate the correlation between "Movie Rating" and "Metascore of Movie"

print(df.columns)

# Calculate the correlation between "Movie Rating" and "Metascore of Movie"
print(df.columns)

correlation = df["Movie Rating"].corr(df["Metascore of movie"])
print("Correlation between Movie Rating and Metascore:", correlation)

# Find the top 5 most popular movies based on the number of votes
top_5_popular_movies = df.sort_values(by="Votes", ascending=False).head(5)
print("Top 5 Most Popular Movies:\n", top_5_popular_movies)

# Create a new column "Earnings per Minute"
df["Earnings per Minute"] = df["Gross"] / df["Watch Time"]

print(df)

# Sort the dataset by "Earnings per Minute" in descending order
sorted_df = df.sort_values(by="Earnings per Minute", ascending=False)

print("Sorted DataFrame:")
print(sorted_df)

# Save the sorted DataFrame to a new CSV file
sorted_df.to_csv("sorted_movies.csv", index=False)

# Read the sorted DataFrame from the CSV file
sorted_movies_df = pd.read_csv("sorted_movies.csv")

# Print the sorted DataFrame
print("Sorted Movies DataFrame:")
print(sorted_movies_df)

